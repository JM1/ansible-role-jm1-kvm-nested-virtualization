---
# Copyright (c) 2020-2022 Jakob Meng, <jakobmeng@web.de>
# vim:set fileformat=unix tabstop=2 shiftwidth=2 expandtab:
# kate: end-of-line unix; space-indent on; indent-width 2; remove-trailing-spaces modified;

- name: Read /proc/cpuinfo to find out virtualization support later
  ansible.builtin.slurp:
    src: /proc/cpuinfo
  register: cpuinfo

- name: Detect Intel virtualization
  ansible.builtin.set_fact:
    kvm_kernel_module: "kvm_intel"
  when: kvm_kernel_module | default(None) == None and 'vmx' in cpuinfo.content | b64decode

- name: Detect AMD virtualization
  ansible.builtin.set_fact:
    kvm_kernel_module: "kvm_amd"
  when: kvm_kernel_module | default(None) == None and 'svm' in cpuinfo.content | b64decode

- name: Warn if system does not support virtualization
  ansible.builtin.debug:
    msg: "No virtualization support has been detected"
  when: kvm_kernel_module | default(None) == None

- name: "Add/Remove modprobe options for nested virtualization in {{ modprobe_conf_path }}"
  # Options are added for all cpus because host might be migrated to another cpu after this role has been executed
  ansible.builtin.blockinfile:
    block: |
      # 2020-2022 Jakob Meng, <jakobmeng@web.de>
      # Enable KVM nested virtualization for Intel and AMD CPUs
      # Ref.: https://galaxy.ansible.com/jm1/kvm_nested_virtualization
      options kvm_intel nested=y
      options kvm_amd nested=1
    path: '{{ modprobe_conf_path }}'
    mode: u=rw,g=r,o=r
    owner: root
    group: root
    create: yes
    state: '{{ state }}'

- name: Apply changes if virtualization support has been detected
  when: kvm_kernel_module | default(None) != None
  block:
  - name: "Ensure kernel module is available and loaded"
    community.general.modprobe:
      name: "{{ kvm_kernel_module }}"
      state: present

  - name: Read nested virtualization support of currently loaded kernel module
    ansible.builtin.slurp:
      src: '/sys/module/{{ kvm_kernel_module }}/parameters/nested'
    register: nested_virtualization_state

  - name: "Reload kernel module if nested virtualization option has changed"
    when:
      reload_module
      and ((state == "present" and nested_virtualization_state.content | b64decode | trim in ['N', '0'])
           or (state == "absent" and nested_virtualization_state.content | b64decode | trim in ['Y', '1']))
    block:
    - name: "Remove kernel module {{ kvm_kernel_module }}"
      community.general.modprobe:
        name: "{{ kvm_kernel_module }}"
        state: absent

    - name: "Load kernel module {{ kvm_kernel_module }}"
      community.general.modprobe:
        name: "{{ kvm_kernel_module }}"
        state: present
